# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# function of self-defined dots-like cmds, like ... or .3 or ~
# usage: cmd_dots <dots_num>
function cmd_dots()
{
    local i dots_num
    local cd_dots_dir dots dots_digital
    local commas commas_digital

    dots_num=$1

    for ((i=1; i <= dots_num ; i++)); do
        if [ ${i} == 1 ]; then
            cd_dots_dir="../"
        else
            cd_dots_dir="${cd_dots_dir}../"
        fi

        dots="${dots}."                                         # ...
        dots_digital=".${i}"                                    # .3
        commas="${commas},"
        commas_digital=",${i}"

        # avoid "." cmd, for conflict with "source (.)"
        if [ ${i} != 1 ]; then
            alias ${dots}="cd ${cd_dots_dir}"
        fi
        alias ${dots_digital}="cd ${cd_dots_dir}"
        alias ${commas}="cd ${cd_dots_dir}"
        alias ${commas_digital}="cd ${cd_dots_dir}"
    done

	local home
	home="~"
	alias ${home}="cd ${home}"

	local last
	last="_"
	alias ${last}="cd -"
}

# function of self-defined cmds, chage work directory
# usage: cmd_change_dirs <dir_base> <dir_suffix>
function cmd_change_dirs()
{
    local dir_base dir_suffix

    if [ $# -lt 2 ]; then
		return
    fi

    dir_base=$1; shift

	for i in $@; do
        dir_suffix=${i}
		alias ${dir_suffix}="cd ${dir_base}/${dir_suffix}"
    done
}

# function of self-defined cmds, change work directory
# usage: cmd_change_dirs_v2 <dir_base>
function cmd_change_dirs_v2()
{
    local dir_base

    if [ $# -lt 1 ]; then
        return
    fi  

    dir_base=$1
    alias work="cd ${dir_base}"

    for file in $(ls ${dir_base}); do
#		[ -d ${dir_base}/${file} ] && file=${file%/*} && alias ${file}="cd ${dir_base}/${file}"
		[ -d ${dir_base}/${file} ] && file=${file%/*} && alias ${file}="cd ${dir_base}/${file}/S*/android || cd ${dir_base}/${file}/M*/android || cd ${dir_base}/${file}/S*/s* || cd ${dir_base}/${file} && echo Done"
    done
}

# self-defined varibles
my_dir_base_main=~/work
# my_dir_base_2=/z/work/
# my_dir_suffixes="3632A 3635A 3701A 3702A C1"

# self-defined cmds
# cmd_change_dirs ${my_dir_base} ${my_dir_suffixes}
# cmd_change_dirs_v2 ${my_dir_base_2}
cmd_change_dirs_v2 ${my_dir_base_main}
cmd_dots 9
cd ${my_dir_base_main}

# alias
alias commit="git add -A && git ci -s -m 'add auto'"
alias push="git add -A && git ci -s -m 'misc auto' && git pom"

# for vim
export PATH="~/.vim/bin:~/bin:$PATH"
